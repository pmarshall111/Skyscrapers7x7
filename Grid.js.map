{"version":3,"file":"Grid.js","sourceRoot":"","sources":["Grid.ts"],"names":[],"mappings":"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","sourcesContent":["import {Solver} from \"./Solver\";\n\nexport class Grid {\n    private grid: number[][];\n    private rows: number;\n    private possibleNumbers: Set<number>[][];\n\n    static getBlankGrid(rows: number) {\n        return new Array(rows).fill([]).map(x => new Array(rows).fill(-1));\n    }\n\n    constructor(grid: number[][], possibleNumbers: Set<number>[][]) {\n        this.grid = grid;\n        this.rows = grid.length;\n        this.possibleNumbers = possibleNumbers;\n    }\n\n    getSquare(row: number, col: number) {\n        return this.grid[row][col];\n    }\n\n    getRow(clueNumb: number): { row: number[], possibleNumbs: Set<number>[] } {\n        let buildings = [];\n        let possibleNumbs = [];\n\n        if (clueNumb < this.rows) {\n            //looking down\n            for (let row = 0; row < this.rows; row++) {\n                buildings.push(this.grid[row][clueNumb]);\n                possibleNumbs.push(this.possibleNumbers[row][clueNumb]);\n            }\n        } else if (clueNumb < this.rows * 2) {\n            //looking left\n            let row = clueNumb % this.rows;\n            for (let col = this.rows - 1; col >= 0; col--) {\n                buildings.push(this.grid[row][col])\n                possibleNumbs.push(this.possibleNumbers[row][col]);\n            }\n        } else if (clueNumb < this.rows * 3) {\n            //looking up\n            let col = this.mirrorClueIndex(clueNumb % this.rows);\n            for (let row = this.rows - 1; row >= 0; row--) {\n                buildings.push(this.grid[row][col]);\n                possibleNumbs.push(this.possibleNumbers[row][col]);\n            }\n        } else {\n            //looking right\n            let row = this.mirrorClueIndex(clueNumb % this.rows);\n            for (let col = 0; col < this.rows; col++) {\n                buildings.push(this.grid[row][col]);\n                possibleNumbs.push(this.possibleNumbers[row][col]);\n            }\n        }\n        return {row: buildings, possibleNumbs};\n    }\n\n    saveSquare(n: number, row: number, col: number) {\n        if (this.grid[row][col] == -1) {\n            this.grid[row][col] = n;\n            this.updatePossibleNumbersNewNumbAdded(n, row, col);\n        }\n    }\n\n    saveRow(buildings: number[], clueNumb: number) {\n        if (clueNumb < this.rows) {\n            //looking down\n            for (let row = 0; row < this.rows; row++) {\n                this.saveSquare(buildings[row], row, clueNumb);\n            }\n        } else if (clueNumb < this.rows * 2) {\n            //looking left\n            let row = clueNumb % this.rows;\n            for (let revCol = this.rows - 1, col = 0; revCol >= 0; revCol--, col++) {\n                this.saveSquare(buildings[revCol], row, col);\n            }\n        } else if (clueNumb < this.rows * 3) {\n            //looking up\n            let col = clueNumb % this.rows;\n            col = this.mirrorClueIndex(col);\n            for (let revRow = this.rows - 1, row = 0; revRow >= 0; revRow--, row++) {\n                this.saveSquare(buildings[revRow], row, col)\n            }\n        } else {\n            //looking right\n            let row = clueNumb % this.rows;\n            row = this.mirrorClueIndex(row);\n            for (let col = 0; col < this.rows; col++) {\n                this.saveSquare(buildings[col], row, col)\n            }\n        }\n    }\n\n    //used for when looking up or right\n    private mirrorClueIndex(modulusIndex: number) {\n        let maxIdx = this.rows - 1;\n        let midPoint = maxIdx / 2;\n        let diff = modulusIndex - midPoint;\n        return midPoint - diff;\n    }\n\n    fillInBlanks() {\n        let hasChanged = true;\n        while (!this.isComplete() && hasChanged) {\n            //adds number if it's the only square\n            hasChanged = this.hasAddedDefinites();\n            if (!hasChanged) {\n                //tries to add negatives only if there are no more definites to add\n                hasChanged = this.hasAddedNegatives();\n            }\n        }\n    }\n\n    private hasAddedDefinites(): boolean {\n        let changes = false;\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.rows; j++) {\n                if (this.getSquare(i, j) == -1 && this.possibleNumbers[i][j].size == 1) {\n                    let onlyNumber = this.possibleNumbers[i][j].values().next().value;\n                    this.saveSquare(onlyNumber, i, j);\n                    changes = true;\n                }\n            }\n        }\n        return changes;\n    }\n\n    //returns true as soon as a negative found\n    private hasAddedNegatives(): boolean {\n        for (let row = 0; row < this.rows; row++) {\n            for (let col = 0; col < this.rows; col++) {\n                if (this.getSquare(row, col) == -1) {\n                    let squareValsRow = new Set(this.possibleNumbers[row][col]);\n                    let squareValsCol = new Set(this.possibleNumbers[row][col]);\n                    //removing values from neighbouring squares\n                    for (let idx = 0; idx < this.rows; idx++) {\n                        if (squareValsRow.size == 0 && squareValsCol.size == 0) {\n                            break;\n                        }\n                        let squareOfRow = this.possibleNumbers[row][idx];\n                        let squareOfCol = this.possibleNumbers[idx][col];\n                        if (idx != col) {\n                            squareOfRow.forEach(n => squareValsRow.delete(n));\n                        }\n                        if (idx != row) {\n                            squareOfCol.forEach(n => squareValsCol.delete(n));\n                        }\n                    }\n                    //looking if any values were only available in current square\n                    if (squareValsCol.size == 1) {\n                        let n = squareValsCol.values().next().value;\n                        this.saveSquare(n, row, col);\n                        return true;\n                    } else if (squareValsRow.size == 1) {\n                        let n = squareValsRow.values().next().value;\n                        this.saveSquare(n, row, col);\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    //for when a new number is added to the grid only\n    updatePossibleNumbersNewNumbAdded(n: number, row: number, col: number) {\n        for (let i = 0; i < this.possibleNumbers.length; i++) {\n            this.possibleNumbers[row][i].delete(n);\n            this.possibleNumbers[i][col].delete(n);\n        }\n        this.possibleNumbers[row][col].clear();\n    }\n\n    updatePossibleNumbersNumbNotAllowed(n: number, row: number, col: number) {\n        this.possibleNumbers[row][col].delete(n);\n    }\n\n    getBestRows(clues: number[]) {\n        let best = [{index: -1, score: 99}];\n        for (let i = 0; i < clues.length/2; i++) {\n                let clue = clues[i];\n                let oppClueIdx = Solver.getOppositeClueIndex(i, this.rows);\n                let oppositeClue = clues[oppClueIdx];\n                let possNumbsForRow = this.getRow(i).possibleNumbs;\n                let spaces = possNumbsForRow.reduce((t,c) => c.size > 0 ? t+1 : t, 0);\n                if (spaces > 0) {\n                    let avgPerSpace = this.getRow(i).possibleNumbs.reduce((t,c) => t+=c.size, 0)/spaces;\n                    for (let j = 0; j<best.length; j++) {\n                        if (avgPerSpace < best[j].score) {\n                            best.splice(j, 0, {index: oppositeClue > clue ? oppClueIdx : i, score: avgPerSpace});\n                            best.splice(3, 1); //ensure length is always 3\n                            break;\n                        }\n                    }\n                }\n        }\n        return best;\n    }\n\n    isComplete() {\n        for (let row = 0; row<this.rows; row++) {\n            for (let col = 0; col<this.rows; col++) {\n                if (this.grid[row][col] == -1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    matchesClues(clues: number[]): boolean {\n        for (let clueIdx = 0; clueIdx < clues.length; clueIdx++) {\n            let clue = clues[clueIdx];\n            if (clue > 0) {\n                let row = this.getRow(clueIdx).row;\n                let numbSeen = 0;\n                let currHighest = -1;\n                for (let buildingIdx = 0; buildingIdx < row.length; buildingIdx++) {\n                    if (row[buildingIdx] > currHighest) {\n                        numbSeen++;\n                        currHighest = row[buildingIdx];\n                    }\n                }\n                if (numbSeen != clue) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    noDuplicateNumbers(): boolean {\n        for (let row = 0; row < this.rows; row++) {\n            let rowNumbs = {};\n            let colNumbs = {};\n            for (let col = 0; col < this.rows; col++) {\n                //go through rows\n                let rowN = this.grid[row][col];\n                if (!rowNumbs[rowN]) {\n                    rowNumbs[rowN] = 1;\n                } else if (rowN != -1) { //we don't care about counting how many -1s\n                    return false;\n                }\n                //go through cols\n                let colN = this.grid[col][row];\n                if (!colNumbs[colN]) {\n                    colNumbs[colN] = 1;\n                } else if (colN != -1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    copy(): Grid {\n        let numbs = this.grid.slice();\n        numbs = numbs.map(x => x.slice());\n        let possibleNumbers = this.copyPossibleNumbers();\n        let newGrid = new Grid(numbs, possibleNumbers);\n        return newGrid;\n    }\n\n    private copyPossibleNumbers() {\n        let newNumbs = [];\n        for (let i = 0; i < this.possibleNumbers.length; i++) {\n            let newArr = [];\n            newNumbs.push(newArr);\n            for (let j = 0; j < this.possibleNumbers[0].length; j++) {\n                newArr.push(new Set(this.possibleNumbers[i][j]))\n            }\n        }\n        return newNumbs;\n    }\n\n    printGrid() {\n        console.log(this.grid);\n    }\n}\n"]}