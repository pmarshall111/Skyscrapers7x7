{"version":3,"file":"BruteForce.js","sourceRoot":"","sources":["BruteForce.ts"],"names":[],"mappings":"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","sourcesContent":["import {Perms} from \"./Perms\";\nimport {Solver} from \"./Solver\";\nimport {Grid} from \"./Grid\";\nimport {PermInfo} from \"./PermInfo\";\n\nclass BruteForce {\n    startTime: number;\n    allPerms: number[][];\n\n    getBoard(clues: number[]): Grid[] {\n        this.startTime = new Date().getTime();\n        let rows = clues.length/4;\n        let permBuilder = new Perms();\n\n        let startRow = this.getStartRow(rows);\n        let startPossibles = new Solver().createPossibleNumbers(rows);\n        this.allPerms = permBuilder.getPerms(startRow, startPossibles[0], {left: 0, right: 0}).map(x => x.row);\n\n        let startSolution = new Array(rows).fill(this.allPerms[0]);\n        let counts = this.getFirstCounts(rows);\n        let numbTested = 0;\n        let solution = [];\n\n        let totalTests = this.allPerms.length**rows;\n        console.log(totalTests);\n\n        while (numbTested < totalTests) {\n            for (let i = 0; i<rows; i++) {\n                let changesEvery = this.allPerms.length**(i);\n                let idx = Math.floor(numbTested/changesEvery) % this.allPerms.length;\n                // let index = (numbTested % changesEvery) % this.allPerms.length;\n                solution[i] = this.allPerms[idx];\n            }\n            let g = new Grid(solution, startPossibles);\n            if (g.noDuplicateNumbers() && g.matchesClues(clues)) {\n                return [g];\n            }\n            numbTested++;\n            // console.log(numbTested)\n        }\n\n        // while (counts[0] < this.allPerms.length) {\n        //     for (let i = 0; i<rows; i++) {\n        //         solution[i] = this.allPerms[counts[i]++];\n        //     }\n        //     let g = new Grid(solution, startPossibles);\n        //     if (g.noDuplicateNumbers() && g.matchesClues(clues)) {\n        //         return [g];\n        //     }\n        // }\n        return [];\n    }\n\n    addDifferentPerm(i: number, counts) {\n\n    }\n\n    getStartRow(numbRows: number) {\n        return new Array(numbRows).fill(-1);\n    }\n\n    getFirstCounts(numbRows: number) {\n        return new Array(numbRows).fill(0);\n    }\n}\n\n// let clues = [ 0, 3, 0, 5, 3, 4,\n//     0, 0, 0, 0, 0, 1,\n//     0, 3, 0, 3, 2, 3,\n//     3, 2, 0, 3, 1, 0];\n\n// let clues = [\n//     0,0,1,2,\n//     0,2,0,0,\n//     0,2,0,0,\n//     4,1,0,0\n// ]\n\n// let clues = [ 0, 3, 0, 4, 3,\n//     0, 2, 0, 1, 2,\n//     0, 0, 0, 0, 0,\n//     3, 2, 0, 3, 0,];\n//\n// let bf = new BruteForce();\n// let boards = bf.getBoard(clues);\n// boards.forEach(g => g.printGrid());\n// console.log((new Date().getTime() - bf.startTime)/1000);\n"]}