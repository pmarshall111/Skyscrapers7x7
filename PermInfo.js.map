{"version":3,"file":"PermInfo.js","sourceRoot":"","sources":["PermInfo.ts"],"names":[],"mappings":"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","sourcesContent":["export class PermInfo {\n    row: number[];\n    numbsUsed: Set<number>;\n    seenPriorToIndex: Set<number>;\n    highestFromLeft: number;\n    biggestNotUsed: number;\n    guaranteedFromRight: number;\n    countLeft: number;\n    nextIndex: number;\n\n    constructor(row: number[], numbsUsed: Set<number>, seenPriorToIndex: Set<number>, highestFromLeft: number, biggestNotUsed: number, guaranteedFromRight: number, countLeft: number, nextIndex: number) {\n        this.row = row;\n        this.numbsUsed = numbsUsed;\n        this.seenPriorToIndex = seenPriorToIndex;\n        this.highestFromLeft = highestFromLeft;\n        this.biggestNotUsed = biggestNotUsed;\n        this.guaranteedFromRight = guaranteedFromRight;\n        this.countLeft = countLeft;\n        this.nextIndex = nextIndex;\n    }\n\n    validateFromRHS(clue): boolean {\n        let count = 0;\n        let highestSoFar = 0;\n        for (let i = this.row.length; i >= 0; i--) {\n            if (this.row[i] > highestSoFar) {\n                count++;\n                highestSoFar = this.row[i];\n            }\n        }\n        return count == clue;\n    }\n\n    static getFirstRecord(row: number[]) {\n        let numbsAlreadyUsed = new Set<number>();\n        let numbsSeenFromLeft = new Set<number>();\n        let highestLeft = -1;\n        let countLeft = 0;\n        let biggestNotUsed = row.length;\n        let guaranteedFromRight = 0;\n        let firstBlankIdx = 0;\n\n        let passedFirstBlank = false;\n        for (let idx = 0; idx < row.length; idx++) {\n            let n = row[idx];\n            if (n == -1) {\n                passedFirstBlank = true;\n            }\n            if (n != -1) {\n                numbsAlreadyUsed.add(row[idx]);\n            }\n            if (!passedFirstBlank) {\n                numbsSeenFromLeft.add(n);\n                firstBlankIdx = idx + 1;\n                if (n > highestLeft) {\n                    highestLeft = n;\n                    countLeft++;\n                }\n                if (n == biggestNotUsed) {\n                    guaranteedFromRight++;\n                    PermInfo.getNextBiggestNotUsed(n, numbsSeenFromLeft);\n                }\n            }\n        }\n        return new PermInfo(row, numbsAlreadyUsed, numbsSeenFromLeft, highestLeft, biggestNotUsed, guaranteedFromRight, countLeft, firstBlankIdx);\n    }\n\n    static getNextBiggestNotUsed(currBiggest: number, numbsToLeft: Set<number>): number {\n        for (let i = currBiggest - 1; i > 0; i--) {\n            if (!numbsToLeft.has(i)) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n"]}